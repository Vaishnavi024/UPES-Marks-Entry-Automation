package com.example.client;

import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.ss.usermodel.*;

import javax.swing.*;
import javax.swing.filechooser.FileNameExtensionFilter;
import java.awt.*;
import java.io.FileInputStream;
import java.io.FileOutputStream;

public class facultyMarksEntry extends JFrame {
    private JLabel filePathLabel;
    private JTextField filePathField;
    private JTextField numQuestionsField;
    private JTextField numCOsField;
    private JTextArea outputArea;

    private int numQuestions;
    private String[] coMapping;
    private int[] maxMarks;
    private JFrame answerSheetFrame;

    public facultyMarksEntry() {
        setTitle("Marks Entry System");
        setSize(500, 300);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLayout(new BorderLayout());

        JPanel filePanel = new JPanel(new BorderLayout());
        add(filePanel, BorderLayout.NORTH);

        filePathLabel = new JLabel("Excel File:");
        filePanel.add(filePathLabel, BorderLayout.WEST);

        filePathField = new JTextField();
        filePathField.setEditable(false);
        filePanel.add(filePathField, BorderLayout.CENTER);

        JButton chooseFileButton = new JButton("Choose File");
        filePanel.add(chooseFileButton, BorderLayout.EAST);
        chooseFileButton.addActionListener(e -> chooseFile());

        JPanel inputPanel = new JPanel(new GridBagLayout());
        GridBagConstraints gbc = new GridBagConstraints();
        gbc.anchor = GridBagConstraints.WEST;
        gbc.insets = new Insets(5, 10, 5, 10);

        add(inputPanel, BorderLayout.CENTER);

        gbc.gridx = 0;
        gbc.gridy = 0;
        inputPanel.add(new JLabel("Number of Questions:"), gbc);

        numQuestionsField = new JTextField(5);
        gbc.gridx = 1;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        gbc.weightx = 1.0;
        inputPanel.add(numQuestionsField, gbc);

        gbc.gridx = 0;
        gbc.gridy = 1;
        inputPanel.add(new JLabel("Number of COs:"), gbc);

        numCOsField = new JTextField(5);
        gbc.gridx = 1;
        inputPanel.add(numCOsField, gbc);

        JButton submitButton = new JButton("Submit");
        gbc.gridx = 0;
        gbc.gridy = 2;
        gbc.gridwidth = 2;
        gbc.fill = GridBagConstraints.NONE;
        gbc.weightx = 0;
        inputPanel.add(submitButton, gbc);
        submitButton.addActionListener(e -> processInput());

        outputArea = new JTextArea(5, 30);
        outputArea.setEditable(false);
        JScrollPane scrollPane = new JScrollPane(outputArea);
        add(scrollPane, BorderLayout.SOUTH);

        setVisible(true);
    }

    private void chooseFile() {
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setFileFilter(new FileNameExtensionFilter("Excel Files", "xlsx", "xls"));
        int returnValue = fileChooser.showOpenDialog(null);
        if (returnValue == JFileChooser.APPROVE_OPTION) {
            filePathField.setText(fileChooser.getSelectedFile().getPath());
        }
    }

    private void processInput() {
        try {
            int numQuestions = Integer.parseInt(numQuestionsField.getText());
            createQuestionForm(numQuestions);
        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(this, "Please enter a valid integer for the number of questions.");
        }
    }

    private void createQuestionForm(int numOfQuestions) {
        JFrame questionFrame = new JFrame("Question Details");
        questionFrame.setSize(600, 400);
        questionFrame.setLayout(new BorderLayout());

        JPanel inputPanel = new JPanel(new GridBagLayout());
        GridBagConstraints gbc = new GridBagConstraints();
        gbc.insets = new Insets(5, 5, 5, 5); // Add padding between components
        gbc.anchor = GridBagConstraints.WEST;

        // Header row
        gbc.gridx = 0;
        gbc.gridy = 0;
        inputPanel.add(new JLabel("Question Number"), gbc);
        gbc.gridx = 1;
        inputPanel.add(new JLabel("CO"), gbc);
        gbc.gridx = 2;
        inputPanel.add(new JLabel("Maximum Marks"), gbc);

        JTextField[] coFields = new JTextField[numOfQuestions];
        JTextField[] maxMarksFields = new JTextField[numOfQuestions];

        // Dynamically generate input fields for each question
        for (int i = 0; i < numOfQuestions; i++) {
            int questionNum = i + 1;
            gbc.gridx = 0;
            gbc.gridy = i + 1;
            inputPanel.add(new JLabel("Q" + questionNum), gbc);

            gbc.gridx = 1;
            coFields[i] = new JTextField(5);
            inputPanel.add(coFields[i], gbc);

            gbc.gridx = 2;
            maxMarksFields[i] = new JTextField(5);
            inputPanel.add(maxMarksFields[i], gbc);
        }

        JButton submitButton = new JButton("Submit");
        JPanel buttonPanel = new JPanel(new FlowLayout(FlowLayout.CENTER));
        buttonPanel.add(submitButton);

        questionFrame.add(new JScrollPane(inputPanel), BorderLayout.CENTER);
        questionFrame.add(buttonPanel, BorderLayout.SOUTH);

        submitButton.addActionListener(e -> {
            try {
                String[] coMapping = new String[numOfQuestions];
                int[] maxMarks = new int[numOfQuestions];

                for (int i = 0; i < numOfQuestions; i++) {
                    coMapping[i] = coFields[i].getText();
                    maxMarks[i] = Integer.parseInt(maxMarksFields[i].getText());
                }

                int numAnswerSheets = Integer.parseInt(JOptionPane.showInputDialog("Enter the number of answer sheets: "));
                for (int s = 0; s < numAnswerSheets; s++) {
                    createAnswerSheetForm(numOfQuestions, numAnswerSheets);
                }

                questionFrame.dispose(); // Close the question form after submission
            } catch (NumberFormatException ex) {
                JOptionPane.showMessageDialog(questionFrame, "Please enter valid numbers for Maximum Marks and Answer Sheets.");
            }
        });

        questionFrame.setVisible(true);
    }


    private void createAnswerSheetForm(int numOfQuestions, int remainingAnswerSheets) {
        if (remainingAnswerSheets <= 0) {
            return; // Exit the method if there are no remaining answer sheets
        }

        JFrame answerSheetFrame = new JFrame("Answer Sheet");
        answerSheetFrame.setSize(500, 300);
        answerSheetFrame.setLayout(new BorderLayout());

        JPanel inputPanel = new JPanel(new GridBagLayout());
        GridBagConstraints gbc = new GridBagConstraints();
        gbc.insets = new Insets(5, 5, 5, 5); // Add padding between components
        gbc.anchor = GridBagConstraints.WEST;

        // Add SAP ID field
        gbc.gridx = 0;
        gbc.gridy = 0;
        inputPanel.add(new JLabel("SAP ID:"), gbc);

        gbc.gridx = 1;
        JTextField sapIdField = new JTextField(10);
        inputPanel.add(sapIdField, gbc);

        // Add question labels and marks fields
        for (int i = 0; i < numOfQuestions; i++) {
            gbc.gridx = 0;
            gbc.gridy = i + 1;
            inputPanel.add(new JLabel("Question " + (i + 1) + ":"), gbc);

            gbc.gridx = 1;
            JTextField marksField = new JTextField(5);
            inputPanel.add(marksField, gbc);
        }

        // Add save button
        gbc.gridx = 0;
        gbc.gridy = numOfQuestions + 1;
        gbc.gridwidth = 2;
        gbc.anchor = GridBagConstraints.CENTER;
        JButton saveButton = new JButton("Save");
        inputPanel.add(saveButton, gbc);

        answerSheetFrame.add(inputPanel, BorderLayout.CENTER);

        saveButton.addActionListener(e -> {
            try {
                // Process the entered SAP ID and marks
                String sapId = sapIdField.getText();
                int[] marks = new int[numOfQuestions];
                for (int i = 0; i < numOfQuestions; i++) {
                    marks[i] = Integer.parseInt(((JTextField) inputPanel.getComponent(i * 2 + 3)).getText());
                }

                // Perform further actions if needed

                createAnswerSheetForm(numOfQuestions, remainingAnswerSheets - 1); // Recursive call for next answer sheet
                answerSheetFrame.dispose(); // Close the current answer sheet form
            } catch (NumberFormatException ex) {
                JOptionPane.showMessageDialog(answerSheetFrame, "Please enter valid marks.");
            }
        });

        answerSheetFrame.setVisible(true);
    }


    private void saveStudentData(int numOfQuestions, String sapId, JTextField[] marksFields, int numAnswerSheets) {
        String filePath = filePathField.getText();
        try (FileInputStream fileInputStream = new FileInputStream(filePath);
             Workbook workbook = new HSSFWorkbook(fileInputStream)) {

            Sheet sheet = workbook.getSheet("Sheet1");
            int rowNum = findRowByModifiedSAPID(sheet, "5000" + sapId); // Assuming '5000' is a prefix
            if (rowNum == -1) {
                JOptionPane.showMessageDialog(null, "Student with SAP ID " + sapId + " not found. Please try again.");
                return;
            }

            Row row = sheet.getRow(rowNum);
            if (row == null) {
                row = sheet.createRow(rowNum);
            }

            int totalMarks = 0;
            for (int i = 0; i < numOfQuestions; i++) {
                int marks = Integer.parseInt(marksFields[i].getText());
                if (marks > maxMarks[i]) {
                    JOptionPane.showMessageDialog(null, "Entered marks exceed maximum marks for question " + (i + 1) + ". Please enter again.");
                    return;
                }
                Cell cell = row.createCell(determineColumnIndex(i + 1, coMapping[i]));
                cell.setCellValue(marks);
                totalMarks += marks;
            }

            Cell totalMarksCell = row.createCell(154); // Assuming 154 is the total marks column index
            totalMarksCell.setCellValue(totalMarks);

            try (FileOutputStream outputStream = new FileOutputStream(filePath)) {
                workbook.write(outputStream);
            }
            JOptionPane.showMessageDialog(null, "Marks updated successfully for SAP ID " + sapId + "!");

        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Error processing the Excel file: " + ex.getMessage());
        }

        // Close the current form and potentially open a new one for the next student
        answerSheetFrame.dispose();

    }



    private int findRowByModifiedSAPID(Sheet sheet, String modifiedSapId) {
        int modifiedSapIdInt = Integer.parseInt(modifiedSapId);
        for (Row row : sheet) {
            Cell cell = row.getCell(2); // Assuming SAP ID is in column C (index 2)
            if (cell != null && cell.getCellType() == CellType.NUMERIC) {
                int sapId = (int) cell.getNumericCellValue();
                if (String.valueOf(sapId).endsWith(modifiedSapId)) {
                    return row.getRowNum();
                }
            }
        }
        return -1; // Return -1 if modified SAP ID is not found
    }

    private int determineColumnIndex(int questionNumber, String co) {
        String coNumber = co.replaceAll("\\D+","");
        return 4 + (6 * (questionNumber - 1)) + (Integer.parseInt(coNumber) - 1);
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(facultyMarksEntry::new);
    }
}
